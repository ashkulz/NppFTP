# Makefile for building NppFTP

ifeq ($(BITS),64)
PREFIX = x86_64-w64-mingw32
OUTDIR = x64
else
PREFIX = i686-w64-mingw32
OUTDIR = x86
endif

CXX    = $(PREFIX)-g++
CFLAGS = -MMD -Os -O3 -Wall -Wno-unused-value -Werror -fexpensive-optimizations -DLIBSSH_STATIC -DWIN32_LEAN_AND_MEAN -DUNICODE -D_UNICODE
LFLAGS = -static -L$(OUTDIR)/obj -L$(OUTDIR)/3rdparty/lib -lcomdlg32 -lcomctl32 -luuid -lole32 -lshlwapi -lssh -lssl -lcrypto -lz -lgdi32 -lws2_32
INC    = -I$(OUTDIR)/3rdparty/include -Isrc -Isrc/Windows -Itinyxml/include -IUTCP/include -I.
RES    = $(OUTDIR)/obj/NppFTP.res

TGT    = $(OUTDIR)/bin/NppFTP.dll
TXML_OBJ = $(patsubst tinyxml/src/%.cpp,$(OUTDIR)/obj/%.o,$(wildcard tinyxml/src/*.cpp))
UTCP_OBJ = $(patsubst UTCP/src/%.cpp,$(OUTDIR)/obj/%.o,$(wildcard UTCP/src/*.cpp))
NPP_OBJ  = $(patsubst src/%.cpp,$(OUTDIR)/obj/%.o,$(wildcard src/*.cpp)) $(patsubst src/Windows/%.cpp,$(OUTDIR)/obj/%.o,$(wildcard src/Windows/*.cpp))
OBJECTS  = $(TXML_OBJ) $(UTCP_OBJ) $(NPP_OBJ)
DEPENDS  = ${OBJECTS:.o=.d}

TGT_D      = $(OUTDIR)/bin/NppFTPd.dll
TXML_OBJ_D = $(patsubst tinyxml/src/%.cpp,$(OUTDIR)/obj/%_debug.o,$(wildcard tinyxml/src/*.cpp))
UTCP_OBJ_D = $(patsubst UTCP/src/%.cpp,$(OUTDIR)/obj/%_debug.o,$(wildcard UTCP/src/*.cpp))
NPP_OBJ_D  = $(patsubst src/%.cpp,$(OUTDIR)/obj/%_debug.o,$(wildcard src/*.cpp)) $(patsubst src/Windows/%.cpp,$(OUTDIR)/obj/%_debug.o,$(wildcard src/Windows/*.cpp))
OBJECTS_D  = $(TXML_OBJ_D) $(UTCP_OBJ_D) $(NPP_OBJ_D)
DEPENDS_D  = ${OBJECTS_D:.o=.d}

all:     release
debug:   $(OUTDIR)/bin $(OUTDIR)/obj $(OUTDIR)/3rdparty $(TGT_D)
release: $(OUTDIR)/bin $(OUTDIR)/obj $(OUTDIR)/3rdparty $(TGT)
	@echo ============ creating NppFTP-$(OUTDIR).zip ============
	@cp -R docs/ $(OUTDIR)/doc/ && cd $(OUTDIR) && zip -9 -r ../NppFTP-$(OUTDIR).zip bin/ doc/

$(OUTDIR)/obj/%.o: tinyxml/src/%.cpp
	@echo CXX  $< & $(CXX) -c $(CFLAGS) $(INC) $< -o $@

$(OUTDIR)/obj/%.o: UTCP/src/%.cpp
	@echo CXX  $< & $(CXX) -c $(CFLAGS) $(INC) $< -o $@

$(OUTDIR)/obj/%.o: src/%.cpp
	@echo CXX  $< & $(CXX) -c $(CFLAGS) $(INC) $< -o $@

$(OUTDIR)/obj/%.o: src/Windows/%.cpp
	@echo CXX  $< & $(CXX) -c $(CFLAGS) $(INC) $< -o $@

$(OUTDIR)/obj/%_debug.o: tinyxml/src/%.cpp
	@echo CXX  $< & $(CXX) -g -c $(CFLAGS) $(INC) $< -o $@

$(OUTDIR)/obj/%_debug.o: UTCP/src/%.cpp
	@echo CXX  $< & $(CXX) -g -c $(CFLAGS) $(INC) $< -o $@

$(OUTDIR)/obj/%_debug.o: src/%.cpp
	@echo CXX  $< & $(CXX) -g -c $(CFLAGS) $(INC) $< -o $@

$(OUTDIR)/obj/%_debug.o: src/Windows/%.cpp
	@echo CXX  $< & $(CXX) -g -c $(CFLAGS) $(INC) $< -o $@

$(OUTDIR)/obj/%.res: src/Windows/%.rc
	@echo RES  $< & $(PREFIX)-windres $(INC) -J rc -O coff -i $< -o $@

$(TGT): $(OBJECTS) $(RES)
	@echo LINK $@ & $(CXX) -shared -Wl,--dll $(OBJECTS) $(RES) -o $@ -s $(LFLAGS)

$(TGT_D): $(OBJECTS_D) $(RES)
	@echo LINK $@ & $(CXX) -shared -Wl,--dll $(OBJECTS_D) $(RES) -o $@ $(LFLAGS)

$(OUTDIR)/bin:
	@mkdir -p $(OUTDIR)/bin

$(OUTDIR)/obj:
	@mkdir -p $(OUTDIR)/obj

$(OUTDIR)/3rdparty:
	@./build_3rdparty.py $(OUTDIR) $(PREFIX)

clean:
	@rm -fr $(OUTDIR)

-include ${DEPENDS}
-include ${DEPENDS_D}
